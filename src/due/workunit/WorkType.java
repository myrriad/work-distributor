package due.workunit;

public class WorkType {
	/**
	 * If your unit cannot be converted to hours, then pass a 0 to the constructor.
	 * @param toHours
	 * pass a 0 if the unit can't be converted into hours
	 */
	public WorkType(double toHours, String name) {
		this.toHours = toHours;
		this.name = name;
	}
	private final String name;
	private final double toHours;
	/**
	 * Can throw an arithmetic exception if not checked.
	 * @return
	 */
	public double getHoursPerUnit(){
		if(!canConvert()) throw new ArithmeticException("Cannot convert!");
		return toHours;
	}
	public boolean canConvert() {
		return toHours != 0;
	}
	public String unitName() {
		return name;
	}
	public String unitNamePlural(){
		return unitName() + "s";
	}
	// auto generated by eclipse
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		long temp;
		temp = Double.doubleToLongBits(toHours);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		WorkType other = (WorkType) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (Double.doubleToLongBits(toHours) != Double.doubleToLongBits(other.toHours))
			return false;
		return true;
	}
	
	
}
